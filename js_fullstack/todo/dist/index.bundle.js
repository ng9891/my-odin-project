(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>f});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(667),s=t.n(c),d=new URL(t(435),t.b),l=new URL(t(994),t.b),u=i()(o()),A=s()(d),m=s()(l);u.push([e.id,"@font-face {\n  font-family: 'Ubuntu';\n  src: url("+A+") format('ttf');\n}\n\n* {\n  padding: 0;\n  margin: 0;\n}\n\n:root {\n  --color-primary: #f8f9fa;\n  --color-secondary: #212529;\n  --color-tertiary: #dee2e6;\n\n  --color-sidebar-indicator: #212529;\n  --color-sidebar-hover: #adb5bd;\n  --color-todo-low: green;\n  --color-todo-med: orange;\n  --color-todo-high: red;\n  --color-red-filter: invert(28%) sepia(99%) saturate(7399%) hue-rotate(357deg) brightness(106%) contrast(115%);\n\n  --font-fc-main: black;\n  --font-fc-secondary: white;\n\n  --font-fz-nav: 1.4rem;\n  --font-fz-projects: 1rem;\n  --font-fz-projects-indicator: 0.75rem;\n}\n\nbody {\n  font-family: Ubuntu;\n}\n\n#container {\n  height: 100vh;\n  display: grid;\n  background-color: var(--color-primary);\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 0.3fr 3fr;\n  grid-template-areas: 'header header' 'nav todo';\n}\n\nheader {\n  grid-area: header;\n  background-color: var(--color-secondary);\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  font-size: 1.5rem;\n  color: var(--font-fc-secondary);\n  padding: 1rem;\n}\n\nheader .sidebar-btn {\n  margin-right: 1rem;\n  display: flex;\n  align-items: center;\n}\n\nheader .sidebar-btn img {\n  cursor: pointer;\n  width: 2.3rem;\n  filter: invert(1);\n}\n\nheader .demo {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n}\n\nheader .demo button {\n  padding: 0.3rem 0.5rem;\n  background-color: var(--color-tertiary);\n  border-radius: 5px;\n}\n\nnav {\n  grid-area: nav;\n  background-color: var(--color-tertiary);\n  position: relative;\n  right: 100%;\n  transition: right 0.5s ease;\n  padding: 1rem 0.7rem;\n  font-size: var(--font-fz-nav);\n  overflow-y: auto;\n}\n\nnav.active {\n  display: block;\n  right: 0%;\n  z-index: 1;\n}\n\nnav ul {\n  cursor: pointer;\n  list-style: none;\n}\n\nnav ul li {\n  padding: 0.5rem;\n  border-radius: 5px;\n}\n\nnav ul li:not(.projects) {\n  display: flex;\n  align-items: center;\n}\n\nnav ul li:not(.projects).active::before {\n  content: url("+m+');\n  display: inline-block;\n  vertical-align: middle;\n  height: 1.5rem;\n}\n\nnav ul li:not(.projects) span:first-of-type {\n  margin-right: auto;\n}\n\nnav ul li:not(.projects) span:last-of-type {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 0.5rem;\n  border-radius: 50%;\n  min-width: 1.3rem;\n  min-height: 1.3rem;\n  padding: 0.2rem;\n  font-size: var(--font-fz-projects-indicator);\n  background-color: var(--color-sidebar-indicator);\n  color: var(--font-fc-secondary);\n}\n\nnav ul li:not(.projects) span.notodo:last-of-type {\n  visibility: hidden;\n}\n\nnav ul li.projects {\n  cursor: default;\n}\n\nnav ul li.projects ul li:first-of-type {\n  margin-top: 0.5rem;\n}\n\nnav li ul.projects-container li {\n  padding: 0.2rem;\n  margin-left: 1rem;\n  font-size: var(--font-fz-projects);\n  overflow-wrap: anywhere;\n}\n\nnav ul .projects-container .add-project {\n  justify-content: center;\n  margin-top: 1rem;\n  margin-left: 0rem;\n}\n\n.todo-container {\n  grid-area: todo;\n  background-color: var(--color-primary);\n  grid-column: 1 / 3;\n  padding: 1rem;\n  overflow-y: auto;\n}\n\n.todo-container .projTitle {\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.todo-container .projTitle .deleteProject {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  margin-left: auto;\n}\n\n.todo-container .item {\n  display: flex;\n  align-items: center;\n  min-height: 1.8rem;\n  padding: 0.5rem;\n  margin-top: 0.5rem;\n  border: 1px solid;\n  border-radius: 5px;\n  box-shadow: 2px 2px 2px 0px;\n  transition: transform 250ms cubic-bezier(0.250, 0.460, 0.450, 0.940); /* easeOutQuad */\n}\n\n.todo-container .item.low {\n  box-shadow: 3px 0px 0px var(--color-todo-low) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.med {\n  box-shadow: 3px 0px 0px var(--color-todo-med) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.high {\n  box-shadow: 3px 0px 0px var(--color-todo-high) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.done {\n  opacity: 0.3;\n  text-decoration: line-through;\n}\n\n.todo-container .item .check {\n  display: flex;\n  align-items: center;\n  margin-inline: 0rem 0.5rem;\n}\n\n.todo-container .item .check input[type=\'checkbox\'] {\n  width: 1.2rem;\n  height: 1.2rem;\n}\n\n.todo-container .item .proj {\n  overflow-wrap: anywhere;\n  font-size: 0.9rem;\n  font-weight: bold;\n  font-style: italic;\n}\n\n.todo-container .item .title {\n  margin-right: auto;\n  overflow-wrap: anywhere;\n}\n\n.todo-container .item .date {\n  flex-shrink: 0;\n  margin-right: 0.25rem;\n  margin-left: 0.5rem;\n}\n\n.todo-container .item .btn-container {\n  cursor: pointer;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n}\n\n.todo-container .item .btn-container img {\n  height: 1.5rem;\n  filter: var(--color-red-filter);\n}\n\n.todo-container .item.add-todo {\n  justify-content: center;\n  border: none;\n  box-shadow: none;\n  height: 2rem;\n}\n\n.modal {\n  margin: auto;\n  border: 2px solid var(--color-secondary);\n  border-radius: 5px;\n  box-shadow: 0 0 0 100vw rgb(0 0 0 / 0.5);\n  min-width: 30ch;\n  z-index: 1;\n}\n\n.modal::backdrop {\n  opacity: 0;\n}\n\n.modal[open] {\n  animation: slide-up 500ms forwards, fade-in 500ms forwards;\n}\n\n.modal[closing] {\n  display: block;\n  pointer-events: none;\n  inset: 0;\n  animation: fade-out 500ms forwards;\n}\n\n.modal .modal-container {\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n}\n\n.modal .modal-container div:first-of-type {\n  cursor: pointer;\n  margin-left: auto;\n}\n\n.modal form .form-control {\n  margin-top: 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.modal form .form-control input {\n  width: 100%;\n  min-height: 1.6rem;\n  border: none;\n  outline: none;\n}\n\n.modal form .form-control #project {\n  padding-inline: 0.5rem;\n  border: 2px solid var(--color-tertiary);\n  border-radius: 5px;\n}\n\n.modal form input[name=\'title\'] {\n  font-weight: bold;\n  font-size: 1.4rem;\n}\n\n.modal form textarea {\n  height: auto;\n  resize: none;\n  outline: none;\n  border: none;\n  width: 100%;\n  line-height: 1.5;\n}\n\n.modal form input[type=\'date\'] {\n  padding-inline: 0.5rem;\n  border: 2px solid var(--color-tertiary);\n  border-radius: 5px;\n}\n\n.modal form .priority-container {\n  justify-content: center;\n  gap: 1rem;\n  margin: 1rem 0;\n}\n\n.modal form .priority-container input[type="radio"] {\n  display: none;\n}\n\n.modal form .priority-container span {\n  display: inline-block;\n  padding: 0.2rem 0.6rem;\n  font-size: 0.8rem;\n  border-radius: 5px;\n  text-transform: uppercase;\n}\n\n.modal form .priority-container input[value="1"] + span {\n  border: 2px solid var(--color-todo-low);\n  color: var(--color-todo-low);\n}\n\n.modal form .priority-container input[value="1"]:checked + span,\n.modal form .priority-container input[value="1"] + span:hover {\n  background-color: var(--color-todo-low);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .priority-container input[value="2"] + span {\n  border: 2px solid var(--color-todo-med);\n  color: var(--color-todo-med);\n}\n\n.modal form .priority-container input[value="2"]:checked + span,\n.modal form .priority-container input[value="2"] + span:hover {\n  background-color: var(--color-todo-med);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .priority-container input[value="3"] + span {\n  border: 2px solid var(--color-todo-high);\n  color: var(--color-todo-high);\n}\n\n.modal form .priority-container input[value="3"]:checked + span,\n.modal form .priority-container input[value="3"] + span:hover {\n  background-color: var(--color-todo-high);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .form-control:last-of-type {\n  justify-content: center;\n  gap: 1rem;\n}\n\n.modal form .form-control:last-of-type > button {\n  padding: 0.4rem 1rem;\n  width: min(100px, 35%);\n  height: 2.6rem;\n  border-radius: 5px;\n  outline: none;\n}\n\n.modal form .form-control:last-of-type > button[type=\'submit\'] {\n  background-color: var(--color-secondary);\n  color: var(--font-fc-secondary);\n}\n\n@media only screen and (min-width: 750px) {\n  #container {\n    grid-template-columns: 32ch 3fr;\n    grid-template-rows: 0.3fr 3fr;\n    grid-template-areas: \'header header\' \'nav todo\';\n  }\n\n  header {\n    padding-left: 3rem;\n  }\n\n  header .sidebar-btn {\n    display: none;\n  }\n\n  nav {\n    right: 0%;\n    padding: 1rem;\n    z-index: 0;\n  }\n\n  nav.active {\n    right: 0%;\n  }\n\n  nav ul li:not(.projects):hover {\n    background-color: var(--color-sidebar-hover);\n  }\n\n  .todo-container {\n    grid-column: 2 / 3;\n    padding: 2.5rem;\n  }\n\n  .todo-container .item .btn-container {\n    display: none;\n    animation: slide-left 350ms forwards, fade-in 350ms forwards;\n  }\n\n  .todo-container .item:hover > .btn-container {\n    display: block;\n  }\n\n  .todo-container .item.add-todo:hover {\n    background-color: var(--color-sidebar-hover);\n  }\n\n  .todo-container .item:not(.done):hover {\n    transform: scale(1.01);\n  }\n\n  .modal {\n    min-width: 60ch;\n  }\n\n  .modal .modal-container {\n    padding: 2rem;\n  }\n\n  .modal form .form-control:last-of-type > button {\n    margin-top: 1rem;\n  }\n}\n\n@media only screen and (min-width: 1500px) {\n  .todo-container {\n    max-width: 120ch;\n  }\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fade-out {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n\n@keyframes slide-up {\n  0% {\n    transform: translateY(100%);\n  }\n  100% {\n    transform: translateY(0%);\n  }\n}\n\n@keyframes slide-left {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0%);\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@font-face {\n  font-family: 'Ubuntu';\n  src: url('./assets/fonts/Ubuntu-Regular.ttf') format('ttf');\n}\n\n* {\n  padding: 0;\n  margin: 0;\n}\n\n:root {\n  --color-primary: #f8f9fa;\n  --color-secondary: #212529;\n  --color-tertiary: #dee2e6;\n\n  --color-sidebar-indicator: #212529;\n  --color-sidebar-hover: #adb5bd;\n  --color-todo-low: green;\n  --color-todo-med: orange;\n  --color-todo-high: red;\n  --color-red-filter: invert(28%) sepia(99%) saturate(7399%) hue-rotate(357deg) brightness(106%) contrast(115%);\n\n  --font-fc-main: black;\n  --font-fc-secondary: white;\n\n  --font-fz-nav: 1.4rem;\n  --font-fz-projects: 1rem;\n  --font-fz-projects-indicator: 0.75rem;\n}\n\nbody {\n  font-family: Ubuntu;\n}\n\n#container {\n  height: 100vh;\n  display: grid;\n  background-color: var(--color-primary);\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 0.3fr 3fr;\n  grid-template-areas: 'header header' 'nav todo';\n}\n\nheader {\n  grid-area: header;\n  background-color: var(--color-secondary);\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  font-size: 1.5rem;\n  color: var(--font-fc-secondary);\n  padding: 1rem;\n}\n\nheader .sidebar-btn {\n  margin-right: 1rem;\n  display: flex;\n  align-items: center;\n}\n\nheader .sidebar-btn img {\n  cursor: pointer;\n  width: 2.3rem;\n  filter: invert(1);\n}\n\nheader .demo {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n}\n\nheader .demo button {\n  padding: 0.3rem 0.5rem;\n  background-color: var(--color-tertiary);\n  border-radius: 5px;\n}\n\nnav {\n  grid-area: nav;\n  background-color: var(--color-tertiary);\n  position: relative;\n  right: 100%;\n  transition: right 0.5s ease;\n  padding: 1rem 0.7rem;\n  font-size: var(--font-fz-nav);\n  overflow-y: auto;\n}\n\nnav.active {\n  display: block;\n  right: 0%;\n  z-index: 1;\n}\n\nnav ul {\n  cursor: pointer;\n  list-style: none;\n}\n\nnav ul li {\n  padding: 0.5rem;\n  border-radius: 5px;\n}\n\nnav ul li:not(.projects) {\n  display: flex;\n  align-items: center;\n}\n\nnav ul li:not(.projects).active::before {\n  content: url('./assets//chevron-right.svg');\n  display: inline-block;\n  vertical-align: middle;\n  height: 1.5rem;\n}\n\nnav ul li:not(.projects) span:first-of-type {\n  margin-right: auto;\n}\n\nnav ul li:not(.projects) span:last-of-type {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 0.5rem;\n  border-radius: 50%;\n  min-width: 1.3rem;\n  min-height: 1.3rem;\n  padding: 0.2rem;\n  font-size: var(--font-fz-projects-indicator);\n  background-color: var(--color-sidebar-indicator);\n  color: var(--font-fc-secondary);\n}\n\nnav ul li:not(.projects) span.notodo:last-of-type {\n  visibility: hidden;\n}\n\nnav ul li.projects {\n  cursor: default;\n}\n\nnav ul li.projects ul li:first-of-type {\n  margin-top: 0.5rem;\n}\n\nnav li ul.projects-container li {\n  padding: 0.2rem;\n  margin-left: 1rem;\n  font-size: var(--font-fz-projects);\n  overflow-wrap: anywhere;\n}\n\nnav ul .projects-container .add-project {\n  justify-content: center;\n  margin-top: 1rem;\n  margin-left: 0rem;\n}\n\n.todo-container {\n  grid-area: todo;\n  background-color: var(--color-primary);\n  grid-column: 1 / 3;\n  padding: 1rem;\n  overflow-y: auto;\n}\n\n.todo-container .projTitle {\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.todo-container .projTitle .deleteProject {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  margin-left: auto;\n}\n\n.todo-container .item {\n  display: flex;\n  align-items: center;\n  min-height: 1.8rem;\n  padding: 0.5rem;\n  margin-top: 0.5rem;\n  border: 1px solid;\n  border-radius: 5px;\n  box-shadow: 2px 2px 2px 0px;\n  transition: transform 250ms cubic-bezier(0.250, 0.460, 0.450, 0.940); /* easeOutQuad */\n}\n\n.todo-container .item.low {\n  box-shadow: 3px 0px 0px var(--color-todo-low) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.med {\n  box-shadow: 3px 0px 0px var(--color-todo-med) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.high {\n  box-shadow: 3px 0px 0px var(--color-todo-high) inset, 2px 2px 2px 0px;\n}\n\n.todo-container .item.done {\n  opacity: 0.3;\n  text-decoration: line-through;\n}\n\n.todo-container .item .check {\n  display: flex;\n  align-items: center;\n  margin-inline: 0rem 0.5rem;\n}\n\n.todo-container .item .check input[type='checkbox'] {\n  width: 1.2rem;\n  height: 1.2rem;\n}\n\n.todo-container .item .proj {\n  overflow-wrap: anywhere;\n  font-size: 0.9rem;\n  font-weight: bold;\n  font-style: italic;\n}\n\n.todo-container .item .title {\n  margin-right: auto;\n  overflow-wrap: anywhere;\n}\n\n.todo-container .item .date {\n  flex-shrink: 0;\n  margin-right: 0.25rem;\n  margin-left: 0.5rem;\n}\n\n.todo-container .item .btn-container {\n  cursor: pointer;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n}\n\n.todo-container .item .btn-container img {\n  height: 1.5rem;\n  filter: var(--color-red-filter);\n}\n\n.todo-container .item.add-todo {\n  justify-content: center;\n  border: none;\n  box-shadow: none;\n  height: 2rem;\n}\n\n.modal {\n  margin: auto;\n  border: 2px solid var(--color-secondary);\n  border-radius: 5px;\n  box-shadow: 0 0 0 100vw rgb(0 0 0 / 0.5);\n  min-width: 30ch;\n  z-index: 1;\n}\n\n.modal::backdrop {\n  opacity: 0;\n}\n\n.modal[open] {\n  animation: slide-up 500ms forwards, fade-in 500ms forwards;\n}\n\n.modal[closing] {\n  display: block;\n  pointer-events: none;\n  inset: 0;\n  animation: fade-out 500ms forwards;\n}\n\n.modal .modal-container {\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n}\n\n.modal .modal-container div:first-of-type {\n  cursor: pointer;\n  margin-left: auto;\n}\n\n.modal form .form-control {\n  margin-top: 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.modal form .form-control input {\n  width: 100%;\n  min-height: 1.6rem;\n  border: none;\n  outline: none;\n}\n\n.modal form .form-control #project {\n  padding-inline: 0.5rem;\n  border: 2px solid var(--color-tertiary);\n  border-radius: 5px;\n}\n\n.modal form input[name='title'] {\n  font-weight: bold;\n  font-size: 1.4rem;\n}\n\n.modal form textarea {\n  height: auto;\n  resize: none;\n  outline: none;\n  border: none;\n  width: 100%;\n  line-height: 1.5;\n}\n\n.modal form input[type='date'] {\n  padding-inline: 0.5rem;\n  border: 2px solid var(--color-tertiary);\n  border-radius: 5px;\n}\n\n.modal form .priority-container {\n  justify-content: center;\n  gap: 1rem;\n  margin: 1rem 0;\n}\n\n.modal form .priority-container input[type=\"radio\"] {\n  display: none;\n}\n\n.modal form .priority-container span {\n  display: inline-block;\n  padding: 0.2rem 0.6rem;\n  font-size: 0.8rem;\n  border-radius: 5px;\n  text-transform: uppercase;\n}\n\n.modal form .priority-container input[value=\"1\"] + span {\n  border: 2px solid var(--color-todo-low);\n  color: var(--color-todo-low);\n}\n\n.modal form .priority-container input[value=\"1\"]:checked + span,\n.modal form .priority-container input[value=\"1\"] + span:hover {\n  background-color: var(--color-todo-low);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .priority-container input[value=\"2\"] + span {\n  border: 2px solid var(--color-todo-med);\n  color: var(--color-todo-med);\n}\n\n.modal form .priority-container input[value=\"2\"]:checked + span,\n.modal form .priority-container input[value=\"2\"] + span:hover {\n  background-color: var(--color-todo-med);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .priority-container input[value=\"3\"] + span {\n  border: 2px solid var(--color-todo-high);\n  color: var(--color-todo-high);\n}\n\n.modal form .priority-container input[value=\"3\"]:checked + span,\n.modal form .priority-container input[value=\"3\"] + span:hover {\n  background-color: var(--color-todo-high);\n  color: var(--font-fc-secondary);\n}\n\n.modal form .form-control:last-of-type {\n  justify-content: center;\n  gap: 1rem;\n}\n\n.modal form .form-control:last-of-type > button {\n  padding: 0.4rem 1rem;\n  width: min(100px, 35%);\n  height: 2.6rem;\n  border-radius: 5px;\n  outline: none;\n}\n\n.modal form .form-control:last-of-type > button[type='submit'] {\n  background-color: var(--color-secondary);\n  color: var(--font-fc-secondary);\n}\n\n@media only screen and (min-width: 750px) {\n  #container {\n    grid-template-columns: 32ch 3fr;\n    grid-template-rows: 0.3fr 3fr;\n    grid-template-areas: 'header header' 'nav todo';\n  }\n\n  header {\n    padding-left: 3rem;\n  }\n\n  header .sidebar-btn {\n    display: none;\n  }\n\n  nav {\n    right: 0%;\n    padding: 1rem;\n    z-index: 0;\n  }\n\n  nav.active {\n    right: 0%;\n  }\n\n  nav ul li:not(.projects):hover {\n    background-color: var(--color-sidebar-hover);\n  }\n\n  .todo-container {\n    grid-column: 2 / 3;\n    padding: 2.5rem;\n  }\n\n  .todo-container .item .btn-container {\n    display: none;\n    animation: slide-left 350ms forwards, fade-in 350ms forwards;\n  }\n\n  .todo-container .item:hover > .btn-container {\n    display: block;\n  }\n\n  .todo-container .item.add-todo:hover {\n    background-color: var(--color-sidebar-hover);\n  }\n\n  .todo-container .item:not(.done):hover {\n    transform: scale(1.01);\n  }\n\n  .modal {\n    min-width: 60ch;\n  }\n\n  .modal .modal-container {\n    padding: 2rem;\n  }\n\n  .modal form .form-control:last-of-type > button {\n    margin-top: 1rem;\n  }\n}\n\n@media only screen and (min-width: 1500px) {\n  .todo-container {\n    max-width: 120ch;\n  }\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fade-out {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n\n@keyframes slide-up {\n  0% {\n    transform: translateY(100%);\n  }\n  100% {\n    transform: translateY(0%);\n  }\n}\n\n@keyframes slide-left {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0%);\n  }\n}\n"],sourceRoot:""}]);const f=u},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var f=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=t(a[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},994:(e,n,t)=>{e.exports=t.p+"aba1647cebad5a62f905.svg"},435:(e,n,t)=>{e.exports=t.p+"1cbb1b79a23478cc89ad.ttf"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{const e=(()=>{const e={};return{publish:(n,t)=>{e[n]&&e[n].forEach((e=>{e(t)}))},subscribe:(n,t)=>{e[n]||(e[n]=[]),e[n].push(t)},unsubscribe:(n,t)=>{e[n]&&e[n].filter((e=>e!==t))}}})(),n=(e,n=0)=>{let t=[];return{addTodo:(r,o=!0)=>!t.find((e=>r.getProjectName()||e.getTitle()!==r.getTitle()?r.getProjectName()&&e.getTitle()===r.getTitle()&&e.getProjectName()===r.getProjectName()?e:void 0:e))&&(r.getCompleted()&&(n+=1),o&&r.setToProject(e),t.push(r),!0),deleteTodo:e=>{const r=t.length;if(0===r)return!1;const o=t.filter((n=>n!==e));return o.length!==r&&(e.getCompleted()&&(n-=1),t=o,!0)},getTitle:()=>e,setTitle:n=>e=n,getTodoArr:()=>t,getSize:()=>t.length,toggleCompleteTask:e=>{if(!t.find((n=>n===e)))return null;const r=e.toggleCompleted();return n=r?n+1:n-1,r},getTodo:e=>t.find((n=>n.getTitle()===e)),getCompletedCount:()=>n}},r=({title:e,desc:n,due:t,priority:r=1,completed:o=!1,project:a=null})=>(r=Number(r),{getTitle:()=>e,setTitle:n=>e=n,setDesc:e=>n=e,setDue:e=>t=e,setPriority:e=>r=Number(e),getTodo:()=>({title:e,desc:n,due:t,priority:r,completed:o,project:a}),getCompleted:()=>o,toggleCompleted:()=>o=!o,setToProject:e=>a=e,getProjectName:()=>a}),o=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},a=(e,n)=>{const t=document.createElement("div");if(t.classList.add(e),n&&n.length>0)for(const e of n)t.appendChild(e);return t},i=({label:e="",id:n,type:t,siblingEl:r,...o})=>{const a=[],i=document.createElement("label");e&&(i.setAttribute("for",n),i.textContent=e,a.push(i));const c=document.createElement("input");c.setAttribute("type",t),n&&c.setAttribute("id",n);for(const[e,n]of Object.entries(o))c.setAttribute(e,n);return"radio"===t?(i.appendChild(c),r&&i.appendChild(r),e||a.push(i)):a.push(c),a},c=(e,n,t)=>{const r=document.createElement("button");return r.setAttribute("type",e),r.textContent=n,t&&r.classList.add(t),r},s=({url:e,className:n,clickEvent:t,parentType:r="div",parentClass:o})=>{const a=document.createElement(r);o&&a.classList.add(o);const i=document.createElement("img");return i.setAttribute("src",e),n&&i.classList.add(n),a.appendChild(i),a.addEventListener("click",t),a},d=e=>{const n=e.target.closest("li");if(n.classList.contains("active"))return;const t=document.querySelector("nav ul li:not(.projects):not(.add-project).active");t&&t.classList.remove("active"),n.classList.add("active"),n.closest(".sidebar").classList.remove("active")},l=(e=2)=>Math.floor(Math.random()*e),u=t=>{const s=t.querySelector(".close-btn img:last-of-type"),d=t.querySelector(".close-btn img:first-of-type"),l=t.querySelector("form"),u=t.querySelector("h3"),A=(e,{projectName:n,title:t,desc:r,priority:s=1,due:A}={})=>{if(o(l),"project"===e){d.style.visibility="hidden",u.textContent="New Project";const e=i({label:"Project:",id:"project",type:"text",name:"project",required:""}),n=a("form-control");for(const t of e)n.appendChild(t);l.appendChild(n)}else{u.textContent="";const o=i({label:"Project:",id:"project",type:"hidden",name:"project",value:n,readonly:"",required:""}),c=a("form-control");c.appendChild(o[1]);const d=i({id:"title",type:"text",name:"title",placeholder:"Name",parentClass:"form-control",maxlength:80,required:""}),m=a("form-control",[d[0]]),f=document.createElement("textarea");f.setAttribute("rows",10),f.setAttribute("id","desc"),f.setAttribute("name","desc"),f.setAttribute("placeholder","Description");const p=a("form-control",[f]),h=i({label:"Due:",id:"due",type:"date",name:"due",parentClass:"form-control"}),g=a("form-control");for(const e of h)g.appendChild(e);const C=document.createElement("span");C.textContent="Low";const E=i({siblingEl:C,id:"low",type:"radio",name:"priority",value:1,checked:""}),b=document.createElement("span");b.textContent="Medium";const v=i({siblingEl:b,id:"medium",type:"radio",name:"priority",value:2}),y=document.createElement("span");y.textContent="High";const w=i({siblingEl:y,id:"high",type:"radio",name:"priority",value:3}),B=a("form-control",[E[0],v[0],w[0]]);if(B.classList.add("priority-container"),"viewTask"===e)switch(d[0].setAttribute("value",t),f.textContent=r,h[1].setAttribute("value",A),s){case 1:E[0].click();break;case 2:v[0].click();break;default:w[0].click()}l.appendChild(m),l.appendChild(p),l.appendChild(c),l.appendChild(g),l.appendChild(B)}const f=c("submit","Save"),p=c("button","Cancel");p.addEventListener("click",m,{once:!0});const h=a("form-control",[f,p]);l.appendChild(h)},m=()=>{t.setAttribute("closing",""),t.addEventListener("animationend",(()=>{t.removeAttribute("closing"),t.close()}),{once:!0}),t.close()};s.addEventListener("click",m);const f=t=>{const r=Object.fromEntries(new FormData(t.target).entries());e.publish("newProject",n(r.project))},p=n=>{const{title:t,desc:o,priority:a,due:i}=Object.fromEntries(new FormData(n.target).entries()),c=r({title:t,desc:o,priority:a,due:i});e.publish("newTaskSubmit",c)},h=(n,t)=>{const{title:r,desc:o,priority:a,due:i,project:c}=Object.fromEntries(new FormData(t.target).entries()),s={title:r,desc:o,priority:a,due:i,projectName:c};e.publish("taskUpdate",{newTodo:s,oldTodo:n})};e.subscribe("openAddProjectModal",(()=>{A("project"),t.close(),t.showModal(),l.addEventListener("submit",f,{once:!0})})),e.subscribe("openAddTaskModal",(({projectName:e})=>{if(!e)return console.error("No projectName");A("addTask",{projectName:e}),t.close(),t.showModal(),l.addEventListener("submit",p,{once:!0})})),e.subscribe("openViewTaskModal",((e,{projectName:n,title:r,desc:o,priority:a,due:i})=>{if(!n)return console.error("No projectName");A(e,{projectName:n,title:r,desc:o,priority:a,due:i}),t.close(),t.showModal(),l.addEventListener("submit",h.bind(null,{title:r,desc:o,priority:a,due:i,projectName:n}),{once:!0})}).bind(null,"viewTask"))},A=(()=>{const n=new Map;let t=null;const r=document.querySelector("ul .projects-container"),a=document.querySelector("li.home"),i=document.querySelector("li.today"),c=document.querySelector("li.week"),l=n=>{d(n);const t=n.target.firstChild.textContent,r=A.getProject(t);r&&e.publish("changeCurrProject",r)},u=(e,n)=>{const t=e.getSize()-e.getCompletedCount();0===t?n.classList.add("notodo"):(n.textContent=t,n.classList.remove("notodo"))},m=t=>{const r=t.getTitle();return n.has(r)?alert("Repeated Project Name"):(n.set(r,t),h(),e.publish("updateStorage",{title:r,projects:n}),!0)},f=t=>{n.delete(t)&&(e.publish("projectDeleted",t),e.publish("updateStorage",{title:t,projects:n}),h())},p=()=>{e.publish("openAddProjectModal")},h=()=>{o(r),n.forEach(((e,o)=>{if("Home"===o||"Today"===o||"Week"===o){let n=null;n="Home"===o?a:"Today"===o?i:c,u(e,n.lastElementChild)}else{const e=(e=>{const r=document.createElement("li"),o=document.createElement("span"),a=document.createElement("span");o.textContent=e;const i=n.get(e);return i&&u(i,a),r.appendChild(o),r.appendChild(a),r.addEventListener("click",l),t&&t.getTitle()===e&&r.classList.add("active"),r})(o);r.append(e)}}));const e=s({url:"../src/assets/plus.svg",clickEvent:p,parentType:"li",parentClass:"add-project"});r.append(e)};return e.subscribe("newProject",m),e.subscribe("changeCurrProject",(e=>{t=e})),e.subscribe("deleteProject",f),e.subscribe("todoAdded",(()=>h())),e.subscribe("todoDeleted",(()=>h())),e.subscribe("todoCompletedToggle",(()=>h())),e.subscribe("generalTabsUpdate",(()=>h())),e.subscribe("projectNameUpdated",(()=>h())),{addProject:m,deleteProject:f,getProject:e=>n.get(e),getProjects:()=>n}})(),m=A;function f(e){const n=(t=e,Array.from(t).reduce(((e,[n,t])=>(e[n]=[...t.getTodoArr()],e)),{}));var t;for(const e in n){if("Today"===e||"Week"===e){delete n[e];continue}const t=n[e];for(let e=0;e<t.length;e++)t[e]&&(t[e]=t[e].getTodo())}return Object.assign({},n)}const p=(()=>{let n,t=!0;const r=e=>{if(t)return;const r=JSON.stringify(f(n));localStorage.setItem("projects",r)};return e.subscribe("updateStorage",(({title:e,projects:r})=>{if(t)return;if("Week"===e||"Today"===e)return;n!==r&&(n=r);const o=JSON.stringify(f(n));localStorage.setItem("projects",o)})),e.subscribe("todoAdded",r),e.subscribe("todoDeleted",r),e.subscribe("todoCompletedToggle",r),e.subscribe("todoUpdated",r),e.subscribe("finishInitalLoad",(e=>{n=e,t=!1})),{restoreStorage:()=>JSON.parse(localStorage.getItem("projects"))}})();function h(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function g(e){return h(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function C(e){h(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function E(e){if(h(1,arguments),!g(e)&&"number"!=typeof e)return!1;var n=C(e);return!isNaN(Number(n))}var b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const y={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function B(e){return function(n,t){var r,o=t||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var c=e.defaultWidth,s=o.width?String(o.width):e.defaultWidth;r=e.values[s]||e.values[c]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const x={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:B({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:B({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:B({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:B({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:B({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(o);if(!a)return null;var i,c=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?j(s,(function(e){return e.test(c)})):T(s,(function(e){return e.test(c)}));i=e.valueCallback?e.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var l=n.slice(c.length);return{value:i,rest:l}}}function T(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function j(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var S,D={ordinalNumber:(S={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(S.matchPattern);if(!t)return null;var r=t[0],o=e.match(S.parsePattern);if(!o)return null;var a=S.valueCallback?S.valueCallback(o[0]):o[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const P={code:"en-US",formatDistance:function(e,n,t){var r,o=b[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:function(e,n,t,r){return w[e]},localize:x,match:D,options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function U(e,n){h(2,arguments);var t=C(e).getTime(),r=M(n);return new Date(t+r)}function N(e,n){h(2,arguments);var t=M(n);return U(e,-t)}var q=864e5;function W(e){h(1,arguments);var n=1,t=C(e),r=t.getUTCDay(),o=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function Y(e){h(1,arguments);var n=C(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=W(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=W(a);return n.getTime()>=o.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function L(e){h(1,arguments);var n=Y(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=W(t);return r}var z=6048e5;function O(e,n){h(1,arguments);var t=n||{},r=t.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:M(o),i=null==t.weekStartsOn?a:M(t.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=C(e),s=c.getUTCDay(),d=(s<i?7:0)+s-i;return c.setUTCDate(c.getUTCDate()-d),c.setUTCHours(0,0,0,0),c}function I(e,n){h(1,arguments);var t=C(e),r=t.getUTCFullYear(),o=n||{},a=o.locale,i=a&&a.options&&a.options.firstWeekContainsDate,c=null==i?1:M(i),s=null==o.firstWeekContainsDate?c:M(o.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,s),d.setUTCHours(0,0,0,0);var l=O(d,n),u=new Date(0);u.setUTCFullYear(r,0,s),u.setUTCHours(0,0,0,0);var A=O(u,n);return t.getTime()>=l.getTime()?r+1:t.getTime()>=A.getTime()?r:r-1}function F(e,n){h(1,arguments);var t=n||{},r=t.locale,o=r&&r.options&&r.options.firstWeekContainsDate,a=null==o?1:M(o),i=null==t.firstWeekContainsDate?a:M(t.firstWeekContainsDate),c=I(e,n),s=new Date(0);s.setUTCFullYear(c,0,i),s.setUTCHours(0,0,0,0);var d=O(s,n);return d}var H=6048e5;function R(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const X=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return R("yy"===n?r%100:r,n.length)},Q=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):R(t+1,2)},Z=function(e,n){return R(e.getUTCDate(),n.length)},G=function(e,n){return R(e.getUTCHours()%12||12,n.length)},J=function(e,n){return R(e.getUTCHours(),n.length)},$=function(e,n){return R(e.getUTCMinutes(),n.length)},_=function(e,n){return R(e.getUTCSeconds(),n.length)},V=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return R(Math.floor(r*Math.pow(10,t-3)),n.length)};var K={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return X(e,n)},Y:function(e,n,t,r){var o=I(e,r),a=o>0?o:1-o;return"YY"===n?R(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):R(a,n.length)},R:function(e,n){return R(Y(e),n.length)},u:function(e,n){return R(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return R(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return R(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return Q(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return R(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){h(1,arguments);var t=C(e),r=O(t,n).getTime()-F(t,n).getTime();return Math.round(r/H)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):R(o,n.length)},I:function(e,n,t){var r=function(e){h(1,arguments);var n=C(e),t=W(n).getTime()-L(n).getTime();return Math.round(t/z)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):R(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):Z(e,n)},D:function(e,n,t){var r=function(e){h(1,arguments);var n=C(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),o=t-r;return Math.floor(o/q)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):R(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return R(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return R(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return R(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return G(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):J(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):R(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):R(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):$(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):_(e,n)},S:function(e,n){return V(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return ne(o);case"XXXX":case"XX":return te(o);default:return te(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return ne(o);case"xxxx":case"xx":return te(o);default:return te(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+ee(o,":");default:return"GMT"+te(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+ee(o,":");default:return"GMT"+te(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return R(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return R((r._originalDate||e).getTime(),n.length)}};function ee(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=n||"";return t+String(o)+i+R(a,2)}function ne(e,n){return e%60==0?(e>0?"-":"+")+R(Math.abs(e)/60,2):te(e,n)}function te(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+R(Math.floor(o/60),2)+t+R(o%60,2)}const re=K;function oe(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}}function ae(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}}const ie={p:ae,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return oe(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",oe(o,n)).replace("{{time}}",ae(a,n))}};function ce(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var se=["D","DD"],de=["YY","YYYY"];function le(e){return-1!==se.indexOf(e)}function ue(e){return-1!==de.indexOf(e)}function Ae(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var me=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pe=/^'([^]*?)'?$/,he=/''/g,ge=/[a-zA-Z]/;function Ce(e,n,t){h(2,arguments);var r=String(n),o=t||{},a=o.locale||P,i=a.options&&a.options.firstWeekContainsDate,c=null==i?1:M(i),s=null==o.firstWeekContainsDate?c:M(o.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=a.options&&a.options.weekStartsOn,l=null==d?0:M(d),u=null==o.weekStartsOn?l:M(o.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var A=C(e);if(!E(A))throw new RangeError("Invalid time value");var m=ce(A),f=N(A,m),p={firstWeekContainsDate:s,weekStartsOn:u,locale:a,_originalDate:A},g=r.match(fe).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,ie[n])(e,a.formatLong,p):e})).join("").match(me).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Ee(t);var i=re[r];if(i)return!o.useAdditionalWeekYearTokens&&ue(t)&&Ae(t,n,e),!o.useAdditionalDayOfYearTokens&&le(t)&&Ae(t,n,e),i(f,t,a.localize,p);if(r.match(ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return g}function Ee(e){return e.match(pe)[1].replace(he,"'")}function be(e,n){h(2,arguments);var t=C(e),r=M(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function ve(e,n){h(2,arguments);var t=C(e),r=M(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var o=t.getDate(),a=new Date(t.getTime());a.setMonth(t.getMonth()+r+1,0);var i=a.getDate();return o>=i?a:(t.setFullYear(a.getFullYear(),a.getMonth(),o),t)}function ye(e,n){if(h(2,arguments),!n||"object"!=typeof n)return new Date(NaN);var t=n.years?M(n.years):0,r=n.months?M(n.months):0,o=n.weeks?M(n.weeks):0,a=n.days?M(n.days):0,i=n.hours?M(n.hours):0,c=n.minutes?M(n.minutes):0,s=n.seconds?M(n.seconds):0,d=C(e),l=r||t?ve(d,r+12*t):d,u=a||o?be(l,a+7*o):l,A=c+60*i,m=s+60*A,f=1e3*m,p=new Date(u.getTime()+f);return p}function we(e,n){h(2,arguments);var t=C(e),r=C(n),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}(()=>{let n=null;const t=document.querySelector(".todo-container"),r=document.querySelector("li.home"),c=t=>{if("checkbox"===t.target.type||t.target.classList.contains("deleteTodoBtn"))return;const r=t.target.closest(".item");if(r&&!r.classList.contains("add-todo")){const n=r.querySelector(".title").textContent,t=r.querySelector(".projName input").value,o=m.getProject(t).getTodo(n);if(!o)return console.error("TODO not found.");const{due:a,priority:i,desc:c}=o.getTodo();e.publish("openViewTaskModal",{projectName:t,title:n,due:a,priority:i,desc:c})}else r.classList.contains("add-todo")&&e.publish("openAddTaskModal",{projectName:n.getTitle()})},d=()=>{e.publish("deleteProject",n.getTitle()),r.click()},l=()=>{o(t);const e=n.getTitle(),r=document.createElement("h2");r.textContent=e;const i=s({url:"../src/assets/trash-can-outline.svg",className:"deleteProjectBtn",clickEvent:d,parentType:"span",parentClass:"deleteProject"}),l=[r];"Today"!==n.getTitle()&&"Week"!==n.getTitle()&&"Home"!==n.getTitle()&&l.push(i);const u=a("projTitle",l);t.appendChild(u);const A=n.getTodoArr(),m=[];if(A.forEach((e=>{const n=e.getTodo(),r=p(n);n.completed?m.push(r):t.appendChild(r)})),m.forEach((e=>{t.appendChild(e)})),"Week"!==e&&"Today"!==e){const e=s({url:"../src/assets/plus.svg",parentClass:"item"});e.classList.add("add-todo"),e.addEventListener("click",c),t.appendChild(e)}},u=t=>{t.preventDefault();const r=t.target.closest(".item"),o=r.querySelector(".title").textContent,a=r.querySelector(".projName input").value,i=m.getProject(a),c=i.getTodo(o);c&&i.deleteTodo(c)&&(n!==i&&n.deleteTodo(c),e.publish("todoDeleted",c),l())},A=n=>{n.preventDefault();const t=n.target.closest(".item"),r=t.querySelector(".title").textContent,o=t.querySelector(".projName input").value,a=m.getProject(o),i=a.getTodo(r);if(i){if(null===a.toggleCompleteTask(i))return console.error("Todo not found.");e.publish("todoCompletedToggle",i),l()}},f={1:"low",2:"med",3:"high"},p=({title:e,due:t,priority:r,completed:o,project:d})=>{const l=i({type:"hidden",value:d})[0],m=a("projName",[l]),p=i({type:"checkbox"})[0],h=a("check",[p]);p.addEventListener("change",A);const g=a("title");g.textContent=e;const C=a("proj");"Today"!==n.getTitle()&&"Week"!==n.getTitle()||(C.textContent=`${d}`);const E=a("date"),b=t?Ce(new Date(t.replace(/-/g,"/")),"MMM dd"):"No due";E.textContent=b;const v=s({url:"../src/assets/trash-can-outline.svg",className:"deleteTodoBtn",clickEvent:u,parentClass:"btn-container"}),y=a("item",[m,h,g,C,E,v]);return y.addEventListener("click",c),y.classList.add(`${f[r]}`),o&&(p.setAttribute("checked",""),y.classList.add("done")),y};e.subscribe("changeCurrProject",(e=>{n=e,l()})),e.subscribe("newTaskSubmit",(t=>{n.addTodo(t)?(e.publish("todoAdded",t),l()):alert("Repeated Task Name")})),e.subscribe("taskUpdate",(({newTodo:n,oldTodo:t})=>{const r=m.getProject(t.projectName),o=r.getTodo(t.title),{title:a,desc:i,due:c,priority:s}=n,d=r.getTodo(n.title);if(d&&d!==o)return alert("Repeated task name");o.setTitle(a),o.setDesc(i),o.setDue(c),o.setPriority(s),o.setToProject(t.projectName),e.publish("todoUpdated",o),l()}))})();const Be=(()=>{const t=document.querySelector("li.home"),r=document.querySelector("li.today"),o=document.querySelector("li.week"),a=n=>{d(n);const t=n.target.firstChild.textContent,r=m.getProject(t);r&&e.publish("changeCurrProject",r)};t.addEventListener("click",a),r.addEventListener("click",a),o.addEventListener("click",a);const i=function(){const t=m.getProjects();e.publish("deleteProject","Today"),e.publish("deleteProject","Week");const r=n("Today"),o=n("Week"),a=(new Date).setHours(0,0,0,0),i=ye(a,{days:1}),c=ye(a,{weeks:1});for(const[e,n]of t.entries())n.getTodoArr().forEach((e=>{let{due:n}=e.getTodo();if(n){n=new Date(n.replace(/-/g,"/"));const t=we(n,i)>=0,s=we(n,c)<=0;t&&s&&o.addTodo(e,!1),we(n,a)>=0&&we(n,i)<0&&r.addTodo(e,!1)}}));e.publish("newProject",r),e.publish("newProject",o)};return e.subscribe("newTaskSubmit",i),e.subscribe("taskUpdate",i),e.subscribe("todoCompletedToggle",i),e.subscribe("todoDeleted",i),e.subscribe("projectDeleted",(e=>{"Week"!==e&&"Today"!==e&&i()})),{calcProjects:i}})(),xe=()=>{const t=`Project${l(999)+l(999)}`,o=n(t),a=(new Date).setHours(0,0,0,0);for(let e=0;e<l(10)+1;e++){const e=`Todo${l(999)+l(999)}`,n=`Random Description ${l(999)}`,i=Ce(ye(a,{days:l(10)}),"yyyy-MM-dd"),c=l(3)+1,s=1===l(),d=r({title:e,desc:n,due:i,priority:c,completed:s,project:t});o.addTodo(d)}e.publish("newProject",o),Be.calcProjects()};var ke=t(379),Te=t.n(ke),je=t(795),Se=t.n(je),De=t(569),Pe=t.n(De),Me=t(565),Ue=t.n(Me),Ne=t(216),qe=t.n(Ne),We=t(589),Ye=t.n(We),Le=t(426),ze={};ze.styleTagTransform=Ye(),ze.setAttributes=Ue(),ze.insert=Pe().bind(null,"head"),ze.domAPI=Se(),ze.insertStyleElement=qe(),Te()(Le.Z,ze),Le.Z&&Le.Z.locals&&Le.Z.locals,(()=>{u(document.querySelector(".modal"));const t=(()=>{const e=p.restoreStorage();if(!e)return!1;for(const[t,o]of Object.entries(e)){const e=n(t);m.addProject(e);for(const n of o){const t=r(n);e.addTodo(t)}}return!0})(),o=t?m.getProject("Home"):n("Home");t||e.publish("newProject",o),e.publish("changeCurrProject",o),Be.calcProjects(),e.publish("finishInitalLoad",m.getProjects()),document.querySelector(".demo button").addEventListener("click",xe),document.querySelector(".sidebar-btn").addEventListener("click",(()=>{document.querySelector(".sidebar").classList.toggle("active")}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,